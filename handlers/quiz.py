
from aiogram import types, Dispatcher
from utils import generate_prediction
from database import save_answers

questions = [
    "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–≥–æ–¥–Ω—è? (0-5)",
    "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ç—ã —Å–ø–∞–ª –ø—Ä–æ—à–ª–æ–π –Ω–æ—á—å—é?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã –æ—â—É—â–∞–µ—à—å –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ?"
]

user_data = {}

async def start_quiz(message: types.Message):
    user_data[message.from_user.id] = {"step": 0, "answers": []}
    await message.answer(questions[0])

async def handle_answer(message: types.Message):
    user_id = message.from_user.id
    data = user_data.get(user_id)

    if data is None:
        await message.answer("–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.")
        return

    try:
        answer = int(message.text.strip())
        data["answers"].append(answer)
        data["step"] += 1
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return

    if data["step"] < len(questions):
        await message.answer(questions[data["step"]])
    else:
        prediction = generate_prediction(data["answers"])
        await message.answer(f"üîÆ {prediction}")
        save_answers(user_id, data["answers"])
        del user_data[user_id]

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_quiz, commands=["quiz"])
    dp.register_message_handler(handle_answer)
