import os
import sqlite3
import openai
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils import executor
from dotenv import load_dotenv
from openai import OpenAI
from prompts import build_prompt
import logging

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher(bot)
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

DB_FILE = "database.db"

def init_db():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER,
            question TEXT,
            answer TEXT,
            prediction TEXT
        )
    ''')
    conn.commit()
    conn.close()

init_db()
user_data = {}

questions = [
    ("age", "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"),
    ("gender", "–£–∫–∞–∂–∏ –ø–æ–ª (–ú/–ñ):"),
    ("job", "–ß–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?"),
    ("routine", "–û–ø–∏—à–∏ —Å–≤–æ–π –æ–±—ã—á–Ω—ã–π –¥–µ–Ω—å:"),
    ("lifestyle", "–ö–∞–∫–æ–π —É —Ç–µ–±—è –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ (–∞–∫—Ç–∏–≤–Ω—ã–π/—Å–∏–¥—è—á–∏–π)?"),
    ("health", "–ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —Å–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ?"),
    ("food", "–ö–∞–∫ —Ç—ã –ø–∏—Ç–∞–µ—à—å—Å—è?"),
    ("goals", "–ö–∞–∫–∏–µ —É —Ç–µ–±—è —Ü–µ–ª–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –≥–æ–¥—ã?"),
    ("social", "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –±–ª–∏–∑–∫–∏–µ –¥—Ä—É–∑—å—è/–ø–∞—Ä—Ç–Ω—ë—Ä?"),
]

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    logging.info(f"–°—Ç–∞—Ä—Ç: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–∞–∑–≥–æ–≤–æ—Ä")
    user_data[message.from_user.id] = {"step": 0, "answers": {}}
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–ø—Ä–æ—Ä–∏—Ü–∞—Ç–µ–ª—å. –î–∞–≤–∞–π —É–∑–Ω–∞–µ–º, –∫—É–¥–∞ —Ç—ã –¥–≤–∏–∂–µ—à—å—Å—è.")
    await message.answer(questions[0][1])

@dp.message_handler()
async def handle_answers(message: types.Message):
    uid = message.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å: {message.text}")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –¥–∞–Ω–Ω—ã–µ
    if uid not in user_data:
        return
    
    data = user_data[uid]
    step = data["step"]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —É–∂–µ –∑–∞–¥–∞–Ω—ã
    if step >= len(questions):
        await message.answer("–¢—ã —É–∂–µ –ø—Ä–æ—à–µ–ª –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–µ –±—É–¥—É—â–µ–µ...")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–≥
    key, _ = questions[step]
    data["answers"][key] = message.text
    data["step"] += 1
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
    if data["step"] < len(questions):
        next_question = questions[data["step"]][1]
        await message.answer(next_question)
    else:
        # –í—Å–µ –æ—Ç–≤–µ—Ç—ã —Å–æ–±—Ä–∞–Ω—ã, —Ç–µ–ø–µ—Ä—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±—É–¥—É—â–µ–µ
        await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–µ –±—É–¥—É—â–µ–µ...")
        
        prompt = build_prompt(data["answers"])
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        result = response['choices'][0]['message']['content']
        await message.answer(result, reply_markup=ReplyKeyboardRemove())
        
        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        del user_data[uid]
    data = user_data.get(uid)

    if not data:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    step = data["step"]
    key, _ = questions[step]
    data["answers"][key] = message.text
    data["step"] += 1

    if data["step"] < len(questions):
        next_question = questions[data["step"]][1]
        await message.answer(next_question)
    else:
        await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–µ –±—É–¥—É—â–µ–µ... üîÆ")

        prompt = build_prompt(data["answers"])
        try:
            response = client.chat.completions.create(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}]
            )
            result = response.choices[0].message.content
            await message.answer(result, reply_markup=ReplyKeyboardRemove())
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–û—à–∏–±–∫–∞ OpenAI: {e}")

        del user_data[uid]

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)